# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
if (num=="best") num = 1
if (num=='worst') num = nrow(sorted.data.state)
#will automatically return NA if num > nrow, as well as if it's some other text value
# if someone passes num < 1, they'll get what's expected
#if (is.numeric(num) & num > nrwo(sorted.data.state) return(NA)
sorted.data.state[num,"Hospital.Name"]
}
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rm(list = ls())
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
##if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
?source
source("rankall.R")
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
rm(list = ls())
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## Return hospital name in that state with lowest 30-day death
data.state <- data[data$State==state,]
idx <- which.min(as.double(data.state[,colName]))
data.state[idx,"Hospital.Name"]
}
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = unique(data[,7])
if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==state,]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
if (num=="best") num = 1
if (num=='worst') num = nrow(sorted.data.state)
#will automatically return NA if num > nrow, as well as if it's some other text value
# if someone passes num < 1, they'll get what's expected
#if (is.numeric(num) & num > nrwo(sorted.data.state) return(NA)
sorted.data.state[num,"Hospital.Name"]
}
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
validOutcome = c("heart attack","heart failure","pneumonia")
if (!outcome %in% validOutcome) { stop("invalid outcome")}
validState = sort(unique(data[,7]))
##if (!state %in% validState) stop("invalid state")
## convert outcome name into column name
fullColName <- c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- fullColName[match(outcome,validOutcome)]
## For each state, find the hospital of the given rank
hospital<-character(0)
for (i in seq_along(validState)) {
## Return hospital name in that state with the given rank 30-day death rate
data.state <- data[data$State==validState[i],]
# order data by outcome
sorted.data.state <- data.state[order(as.numeric(data.state[[colName]]),data.state[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (this.num=="best") this.num = 1
if (this.num=='worst') this.num = nrow(sorted.data.state)
hospital[i] <- sorted.data.state[this.num,"Hospital.Name"]
}
## Return a data frame with the hospital names and the (abbreviated) state name
data.frame(hospital=hospital,state=validState,row.names=validState)
}
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
rm(list = ls())
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package,counry)
select(cran,ip_id,package,country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
select(cran, -X:size)
select(cran, -X,-date, -size,)
select(cran,-X,-date,-size,)
pkm
13
info()
skip()
-(5:20)
select(cran, -X:size)
select(cran, -(X:size)
select(cran, -X:size)
skip()
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version == "3.0.2",country == "IN")
filter(cran, r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size >= 100500, r_os == "IN")
filter(cran, size >= 100500, r_os == "linux-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(!is.na(r_version=="NOT NA"))
filter(!is.na(r_version=="NA"))
skip()
cran2<-select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package,
| ip_id)
arrange(cran2, package,ip_id)
arrange(cran2, country,desc(r_version))
arrange(cran2, country, desc(r_version), ip_id)
select(ip_id,package,size
select(ip_id,package,size)
select(cran,ip_id,package,size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
skip()
skip()
summarize(cran, avg_bytes = mean(size))
getwd()
setwd("/Users/mariansvatko/datasciencecoursera")
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file(https:/d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file(https:d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
rm(list = ls())
data<-read.csv("ss06hid.csv")
str(data)
head(data)
names(data)
summary(data$VAL)
data$VAL
data$TAXP
tail(data$VAL)
filter(data,VAL>=14)
sum(data,VAL>=14)
select(data,VAL>=14)
library("dpyr")
library("dplyr")
select(data,VAL>=14)
subset(data,VAL==24)
nrow
nrow(subset(data,VAL==24))
rm(list = ls())
install.packages("XLSX")
install.packages("xlsx")
library(xlsx)
data<-read.xlsx("DATA.gov_NGAP.xlsx")
data<-read.table("DATA.gov_NGAP.xlsx")
data<-read.xlsx2("DATA.gov_NGAP.xlsx")
?read.xls
??read.xls
library(rJava)
install.packages("rJava")
library(rJava)
data<-read.csv("DATA.gov_NGAP")
data<-read.csv(file.choose())
?subset
dat<-subset(data,nrow(18:23),ncol(7:15))
data[18:23,]
data[18:23,7:15]
dat<-data[18:23,7:15]
dat
sum(dat$Zip*dat$Ext,na.rm=T)
?rowindex
??rowindex
names(data)
dat<-read.csv(file.choose())
dat
sum(dat$Zip*dat$Ext,na.rm=T)
?fried
??fried
rm(list = ls())
read.csv(file.choose())
dat<-read.csv(file.choose())
names(dat)
dat<-read.csv(file.choose())
names(dat)
summary(dat$pwgtp15)
head(dat$pwgtp15)
insÂ§
rm(list = ls())
swirl()
mydf<-read.csv(path2csv,and stringsAsFactors = FALSE)
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf")
cran
?select
select(cran,ip_id,package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran,package=="swirl")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version <= "3.0.2",country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size>100500,r_os="linuz-gnu")
filter(cran, size>100500,r_os=="linuz-gnu")
filter(cran, size > 100500, r_os == "linuz-gnu")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2<-select(cran,size:ip_id)
arrange(cran,ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package,
| ip_id)
arrange(cran2, package,ip_id)
arrange(cran2, country,desc(r_version),ip_id)
cran3<-select(cran,ip_id,package,size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20,size_gb=size_mb/2^10)
mutate(cran3, correct_size=size_mb-1000)
skip()
avg_bytes<-summarize(cran, avg_bytes = mean(size))
skip()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
skip()
skip()
rm(list = ls())
github <- oauth_endpoints("github")
restdata
restData<-read\
restData<-read.csv(file.choose())
head(restData)
tail(restData)
summary(restData)
str(restData)
quantile(restData$councilDistrict,na.rm = TRUE)
plot(restData$councilDistrict)
hist(restData$councilDistrict)
quantile(restData$councilDistrict,probs = c(0.5,0.75,0.9))
table(restData$zipCode)
table(restData$councilDistrict,restData$zipCode)
sum(is.na(restData$councilDistrict))
table(restData$zipCode %in% c("21212,21213"))
restData[restData$zipCode %in% c("21212,21213"))]
restData[restData$zipCode %in% c("21212,21213")),]
restData[restData$zipCode %in% c("21212,21213"),]
table(restData[restData$zipCode %in% c("21212,21213"),])
restData[restData$zipCode == "21212",]
restData[restData$zipCode == "21212" | "21213",]
data("UCBAdmissions")
DF=as.data.frame(UCBAdmissions)
summary(DF)
?xtabs
xt<-xtabs(Freq~Gender+Admit,data = DF)
xt
xt<-xtabs(Freq~Admit+Gender,data = DF)
xt
xt<-xtabs(Freq~Gender+Admit,data = DF)
data("warpbreaks")
W<-as.data.frame(warpbreaks)
head(W)
str(W)
summary(W)
xt<-xtabs(breaks~.,data = W)
xt
ftable(xt)
object.size(restData)
print(object.size(restData),units = "Mb")
restData$nearMe<-restData$neighborhood == "Roland Park"
table(restData$nearMe)
restData$zipWrong<-ifelse(restData$zipCode<0,TRUE,FALSE)
table(restData$zipWrong,restData$zipCode<0)
library(reshape2)
head(mtcars)
?rownames
mtcars$carname<-rownames(mtcars)
head(mtcars)
?melt
carMelt <- melt(mtcars, id=c("carname","gear","cyl"),measure.vars = c("mpg","hp"))
head(carMelt)
carMelt <- melt(mtcars, id=c("carname","cyl"),measure.vars = c("mpg","hp"))
head(carMelt)
?filter
filter(carMelt,desc(cyl))
arrange(carMelt,desc(cyl))
carMelt <- melt(mtcars, id=c("carname","cyl","hp"),measure.vars = c("mpg"))
head(carMelt)
arrange(carMelt,desc(cyl))
arrange(carMelt,desc(cyl),desc(hp))
cylData<dcast(carMelt,cyl~variable,mean)
cylData<-dcast(carMelt,cyl~variable,mean)
head(cylData,n=3)
data("InsectSprays")
head(InsectSprays)
str(InsectSprays)
summary(InsectSprays)
swirl()
library(dplyr)
cran<- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran)
by_package<-group_by(cran,package)
by_package
skip()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
skip()
info()
bey()
bye()
head(InsectSprays)
tapply(InsectSprays$count,InsectSprays$spray,sum)
rm(list = ls())
fileURL <- "https://github.com/DataScienceSpecialization/courses/blob/master/03_GettingData/dplyr/chicago.rds?raw=true"
download.file(fileURL, destfile = "./data/chicago.rds", method = "curl", extra='-L')
chicago <- readRDS("./data/chicago.rds")
rm(list = ls())
data("WorldPhones")
head(WorldPhones)
data("mtcars")
dim(mtcars)
str(mtcars)
names(mtcars)
head(select(mtcars,cyl,hp))
filter(mtcars,hp>200)
a<-filter(mtcars,hp>200)
a
a<-subset(mtcars,hp>200)
a
a<-arrange(a,hp)
a
a<-arrange(a,desc(hp)
a<-arrange(a,desc(hp))
a
tail(a)
View(a)
a<-subset(arrange(mtcars,esc(hp)),hp>=200)
a<-subset(mtcars,hp>=200)
a
a<-subset(arrange(mtcars,desc(hp))mtcars,hp>=200)
a<-subset(arrange(mtcars,desc(hp)),mtcars,hp>=200)
arrange(a,desc(hp))
200<-subset(mtcars,hp>=200)
b<-subset(mtcars,hp>=200)
b
b<-arrange(b,desc(hp))
b
mtcars<-mutate(mtcars,big=factor(hp>=100,labels = c("medium","hot")))
head(mtcars)
?summarize()
summarize(mtcars,big)
rm(list = ls())
swirl()
mydf<-read.csv(path2csv,stringsAsFactors = FALSE)
dim()
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dply")
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-(5:20)
-5:20
-(5:20)
skip()
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1",
| country == "US")
filter(cran, r_version == "3.1.1",country == "US")
?Comparison
filter(cran, r_version == "3.0.2",country == "IN")
skip()
filter(cran, country == "US" | country == "IN")
skip()
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
skip()
cran2<-select(cran,size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id)
arrange(cran2, desc(ip_id))
skip()
skip()
skip()
cran3
mutate(cran3,size_mb=size/2^20)
mutate(cran3,size_mb=size/2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
skip()
skip()
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<-group_by(cran,package)
by_package
summaruze(group_by(by_package,mean()))
summaruze(group_by(by_package,mean)
skip()
pack_sum <- summarize(by_package,
count = ,
unique = ,
countries = ,
avg_bytes = )
skip()
pack_sum
info()
